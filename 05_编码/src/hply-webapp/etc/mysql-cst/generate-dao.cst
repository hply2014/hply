<%-- 
Author: ChengQiyi

Create time:2013年8月16日 13:51:47
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Java" Inherits="" Debug="False" Description="Template description here." %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the stored procedures should be based on." %> 
<%@ Property Name="NameSpace" Type="System.String" Default="hply.dao" Optional="False" Category="" Description="" Editor="" EditorBase="" Serializer="" %>
<%@ Property Name="Author" Type="System.String" Default="ChengQiyi" Optional="False" Category="Author" Description="" Editor="" EditorBase="" Serializer="" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System" %>
<%@ Import Namespace="System" %>
/**
  * @Template info: 2013/08/16, Chengqiyi, Beijing ieforever Corporation in HFP Project.
  * <%=Author%> create in <%=System.DateTime.Now%>
  * This class generated by CodeSmith Generator
  */

package <%=NameSpace%>;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import org.springframework.jdbc.core.RowMapper;
import com.hhwy.rdc.hfp.model.<%=GetClassName()%>Model;

/**
  * 数据操作类，对应的数据库表： [<%=SourceTable.Name%>]
  * <%=SourceTable.Description%>
  */
public class <%=GetClassName()%>DAO extends BaseDAO {

	public static <%=GetClassName()%>Model getById(String id) {
		<%=GetClassName()%>Model obj = jt.queryForObject(
				"select * from <%=SourceTable.Name%> where id=?", mapper, id);
		return obj;
	}

	public static List<<%=GetClassName()%>Model> getList() {
		List<<%=GetClassName()%>Model> list = jt.query("select * from <%=SourceTable.Name%>",
				mapper);
		return list;
	}

	public static int insert(<%=GetClassName()%>Model model) {
		final String SQL_INSERT = "<%=GetInsertSQL()%>";
		return jt.update(SQL_INSERT, <%=GetInsertValues()%>);
	}

	public static int updateById(<%=GetClassName()%>Model model) {
        final String SQL_UPDATE = "<%=GetUpdateSQL()%>";
		return jt.update(SQL_UPDATE, <%=GetUpdateValues()%>);
	}

	public static int deleteById(String id) {
		return jt.update("delete from <%=SourceTable.Name%> where id=?", id);
	}

	private static final RowMapper<<%=GetClassName()%>Model> mapper = new RowMapper<<%=GetClassName()%>Model>() {
		public <%=GetClassName()%>Model mapRow(ResultSet rs, int rowNum)
				throws SQLException {
			<%=GetClassName()%>Model obj = new <%=GetClassName()%>Model();<%
		foreach(ColumnSchema cs in SourceTable.Columns)
		{%>
            obj.set<%=GetColumnName(cs)%>( rs.get<%=GetJdbcOracleType(cs)%>("<%=TrimStart(cs.Name, "CQIYI.")%>") );<%}%>;
			return obj;
		}
	};
    
//======================================================================================
// TODO: 附加的其他方法
//======================================================================================


}

<script runat="template">
public string TrimStart(string str1, string str2)
{
	return str1.Replace(str2, "");
}

public string ReformatString(string dbObjName)
{
	string[] arr = dbObjName.Split('_');
	string s = string.Empty;
	for(int i=0; i<arr.Length; i++)
	{
		if(arr[i].Length == 0) continue;
		string fChr = arr[i][0] + string.Empty;
		s += fChr.ToUpper() + arr[i].Substring(1).ToLower();
	}
	return s;
}

	
public string GetClassName()
{
	string n = SourceTable.Name;
	if(n.StartsWith("T_HFP"))
	{
		n = n.Substring(5);
	}
	else if(n.StartsWith("T_"))
	{
		n = n.Substring(2);		
	}
	return ReformatString(n);
}

public string GetColumnType(ColumnSchema col)
{
	string strType = string.Empty;
	if( col.NativeType == "NUMBER")
	{
		if(col.Scale == 0)
        {
            if(col.Precision < 10)
            {
                strType="int";
            }
            else if(col.Precision < 20)
            {
                strType="long";        
            }
            else
            {
                strType = "What? NUMBER(" + col.Precision + ")";// Too long....
            } 
        }
        else{
            return "double";// Ignor float and decimal    
        }
	}
    else if(col.NativeType == "VARCHAR" || col.NativeType == "VARCHAR2"
	         || col.NativeType == "NVARCHAR2" || col.NativeType == "CHAR"
			 || col.NativeType == "NCHAR" || col.NativeType == "CLOB"
			 || col.NativeType == "NCLOB" || col.NativeType == "LONG"
			 || col.NativeType == "UROWID" || col.NativeType == "XMLType")
    {
		strType = "String";
	}
    else if(col.NativeType == "DATE" || col.NativeType == "TIMESTAMP")
    {
		strType = "Timestamp";
	}
    else if(col.NativeType == "BFILE" || col.NativeType == "BLOB"
	         || col.NativeType == "LONG RAW" || col.NativeType == "RAW")
    {
		strType="byte[]";
	}
    else{
	    strType = "Unknow";
	}
    return strType;
}

public string GetColumnName(ColumnSchema col)
{
	return ReformatString(col.Name);
}

public string GetJdbcOracleType(ColumnSchema col)
{
    string t = GetColumnType(col);
	return (t[0] + string.Empty).ToUpper() + t.Substring(1);
}

public string GetInsertSQL()
{
	string f = string.Empty;
	string v = string.Empty;
	
	for(int i=0; i<SourceTable.Columns.Count; i++)
	{
		f += SourceTable.Columns[i].Name +", ";
		v +=  "?, ";
	}
	
	return string.Format("insert into {0}({1}) values( {2} )", SourceTable.Name, f.Trim().TrimEnd(','),  v.Trim().TrimEnd(','));
}


public string GetInsertValues()
{
	string f = string.Empty;
	string v = string.Empty;
	
	for(int i=0; i<SourceTable.Columns.Count; i++)
	{
		v +=  "model.get" +  GetColumnName(SourceTable.Columns[i]) + "(), ";
	}
	
	return v.Trim().TrimEnd(',');
}

public string GetUpdateSQL()
{
	string s = string.Empty;
	
	for(int i=0; i<SourceTable.Columns.Count; i++)
	{
		if(SourceTable.Columns[i].Name.ToUpper() != "ID")
        {
			s += string.Format("{0} = ?, ", SourceTable.Columns[i].Name);
		}
	}
	
	return string.Format("update {0} set {1} where id= ?", SourceTable.Name, s.TrimEnd(", ".ToCharArray()));
}

public string GetUpdateValues()
{
	string v = string.Empty;
	
	for(int i=0; i<SourceTable.Columns.Count; i++)
	{        
		if(SourceTable.Columns[i].Name.ToUpper() != "ID")
        {
			v +=  "model.get" +  GetColumnName(SourceTable.Columns[i]) + "(), ";
		}
		
	}
    return v + "model.getId()";
}
</script>