<%-- 
Author: ChengQiyi

Create time:2013年8月16日 13:51:47
--%>
<%@ CodeTemplate Language="C#" TargetLanguage="Java" Inherits="" Debug="False" Description="Template description here." %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="选择源表." %> 
<%@ Property Name="NameSpace" Type="System.String" Default="hply.persistence" Optional="False" Category="Context" Description="" Editor="" EditorBase="" Serializer="" %>
<%@ Property Name="Author" Type="System.String" Default="ChengQiyi" Optional="False" Category="Author" Description="" Editor="" EditorBase="" Serializer="" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System" %>
<%@ Import Namespace="System" %>
/**
  * @Template info: 2013/08/16, Chengqiyi.
  * <%=Author%> create in <%=System.DateTime.Now%>
  * This class generated by CodeSmith Generator
  */

package <%=NameSpace%>;

import java.util.List;
import java.util.Map;

import hply.domain.<%=GetClassName()%>;

public interface <%=GetClassName()%>Mapper {

  void updateInventoryQuantity(Map<String, Object> param);

  int getInventoryQuantity(String itemId);

  List<Item> getItemListByProduct(String productId);

  Item getItem(String itemId);

}


<script runat="template">
public string TrimStart(string str1, string str2)
{
	return str1.Replace(str2, "");
}

public string ReformatString(string dbObjName)
{
	string[] arr = dbObjName.Split('_');
	string s = string.Empty;
	for(int i=0; i<arr.Length; i++)
	{
		if(arr[i].Length == 0) continue;
		string fChr = arr[i][0] + string.Empty;
		s += fChr.ToUpper() + arr[i].Substring(1).ToLower();
	}
	return s;
}

	
public string GetClassName()
{
	string n = SourceTable.Name;
	if(n.StartsWith("t_"))
	{
		n = n.Substring(2);		
	}
	return ReformatString(n);
}

public string GetColumnType(ColumnSchema col)
{
	string strType = string.Empty;
	if(col.NativeType == "varchar")
    {
		strType = "String";
	}
    else if(col.NativeType == "datetime")
    {
		strType = "Date";
	}
    else{
	    strType = col.NativeType;
	}
    return strType;
}

public string GetColumnName(ColumnSchema col)
{
	return ReformatString(col.Name);
}

public string GetJdbcOracleType(ColumnSchema col)
{
    string t = GetColumnType(col);
	return (t[0] + string.Empty).ToUpper() + t.Substring(1);
}

public string GetInsertSQL()
{
	string f = string.Empty;
	string v = string.Empty;
	
	for(int i=0; i<SourceTable.Columns.Count; i++)
	{
		f += SourceTable.Columns[i].Name +", ";
		v +=  "?, ";
	}
	
	return string.Format("insert into {0}({1}) values( {2} )", SourceTable.Name, f.Trim().TrimEnd(','),  v.Trim().TrimEnd(','));
}


public string GetInsertValues()
{
	string f = string.Empty;
	string v = string.Empty;
	
	for(int i=0; i<SourceTable.Columns.Count; i++)
	{
		v +=  "model.get" +  GetColumnName(SourceTable.Columns[i]) + "(), ";
	}
	
	return v.Trim().TrimEnd(',');
}

public string GetUpdateSQL()
{
	string s = string.Empty;
	
	for(int i=0; i<SourceTable.Columns.Count; i++)
	{
		if(SourceTable.Columns[i].Name.ToUpper() != "ID")
        {
			s += string.Format("{0} = ?, ", SourceTable.Columns[i].Name);
		}
	}
	
	return string.Format("update {0} set {1} where id= ?", SourceTable.Name, s.TrimEnd(", ".ToCharArray()));
}

public string GetUpdateValues()
{
	string v = string.Empty;
	
	for(int i=0; i<SourceTable.Columns.Count; i++)
	{        
		if(SourceTable.Columns[i].Name.ToUpper() != "ID")
        {
			v +=  "model.get" +  GetColumnName(SourceTable.Columns[i]) + "(), ";
		}
		
	}
    return v + "model.getId()";
}
</script>