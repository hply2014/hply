<%-- 
Name:
Author: 成七一
Description:Service Class GENERATE TEMPLATE FOR FWEB（FOREVER WEB RAPID FRAMEWORK）
CreateTime：2014年7月17日 13:43:50
--%>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System" %>
<%@ Import Namespace="System" %>
<%@ Map Name="JavaAlias" Src="mysql-java-alias" %>

<%@ Template Language="C#" TargetLanguage="Java" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="只能选择一个表." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Context" Default="org.hhwy.rdc.fweb1" %>
<%@ Property Name="Author" Type="System.String" Category="Context" Default="cqiyi" %>
package <%=NameSpace%>.service;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import <%=NameSpace%>.domain.<%=GetDomainClassName()%>;
import <%=NameSpace%>.mapper.<%=GetDomainClassName()%>Mapper;
import <%=NameSpace%>.core.DataVersionConflictException;

@Service

/**
 * <%=SourceTable.Description %>，服务类
 */
public class <%=GetDomainClassName()%>Service {
    Logger logger = LoggerFactory.getLogger(<%=GetDomainClassName()%>Service.class);
    
	@Autowired
    private <%=GetDomainClassName()%>Mapper mapper;
    
    /**
     * <%=SourceTable.Description %>，插入对象
     */
	  public void insert(<%=GetDomainClassName()%> <%=GetDomainVariableName()%>){
        mapper.insert(<%=GetDomainVariableName()%>);
      }
      
	  /**
     * <%=SourceTable.Description %>，不进行冲突检测的更新
     */
	  public void update(<%=GetDomainClassName()%> <%=GetDomainVariableName()%>){
        mapper.update(<%=GetDomainVariableName()%>);
      }
      
    /**
     * <%=SourceTable.Description %>，更新数据前检测冲突，防止并发更新错误。
     */
	  public void updateNoConflict(<%=GetDomainClassName()%> <%=GetDomainVariableName()%>){
      if(mapper.getVersion(<%=GetDomainVariableName()%>.getId()) != <%=GetDomainVariableName()%>.getVersion()){
            throw new DataVersionConflictException("Data conflict has occurred， <%=SourceTable.Name%>.id=" + <%=GetDomainVariableName()%>.getId() );
          }
        mapper.update(<%=GetDomainVariableName()%>);
      }
      
	  /**
     * <%=SourceTable.Description %>，根据主键删除对象
     */
	  public void delete(String id){
        mapper.delete(id);
      }
	  /**
     * <%=SourceTable.Description %>，根据主键获取一个对象
     */
	  public <%=GetDomainClassName()%> get(String id){
        return mapper.get(id);
      }
	  /**
     * <%=SourceTable.Description %>，获取所有对象
     */
	  public List<<%=GetDomainClassName()%>> getAll(){
        return mapper.getAll();
      }
}

<script runat="template">
    public override string GetFileName() {
        return GetDomainClassName() + "Service.java";
    }
    
    public string GetDomainClassName() {
        return StringUtil.ToPascalCase(SourceTable.Name.TrimStart("t_".ToCharArray()));
    }
    
    public string GetDomainVariableName() {
        return StringUtil.ToCamelCase(SourceTable.Name.TrimStart("t_".ToCharArray()));
    }
    
    public string GetJavaType(ColumnSchema col) {
        try{
            return JavaAlias[col.NativeType];
        }catch(Exception ex){
            return col.NativeType + "[N/A]";
        }
    }
</script>