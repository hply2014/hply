<%-- 
Name:
Author: 成七一
Description: DOMAIN GENERATE TEMPLATE FOR FWEB（FOREVER WEB RAPID FRAMEWORK）
--%>

<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="System.Data" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Assembly Name="System" %>
<%@ Import Namespace="System" %>
<%@ Map Name="JavaAlias" Src="mysql-java-alias" %>

<%@ Template Language="C#" TargetLanguage="Java" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="只能选择一个表." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Context" Default="org.hhwy.rdc.fweb1" %>
<%@ Property Name="Author" Type="System.String" Category="Context" Default="cqiyi" %>

/**
  * @ <%=Author%> create in <%=System.DateTime.Now%> by Template
  * This class generated by Forever Web Rapid Framework Code Generator
  */

package <%=NameSpace%>.domain;

import java.io.Serializable;
import java.text.MessageFormat;
import java.util.Date;

import javax.validation.constraints.NotNull;

import org.apache.commons.lang3.StringUtils;
import <%=NameSpace%>.Utility;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.format.annotation.DateTimeFormat.ISO;

/**
  * 数据表： [<%=SourceTable.Name%>]
  * <%=SourceTable.Description %>
  */
public class <%=GetClassName()%> implements Serializable {

	/*
	 * 默认构造函数
	 */
	public <%=GetClassName()%>() {
		this.id = Utility.getRandomUUID();
        
        //设定日期为空时的初始值
        <%foreach(ColumnSchema col in SourceTable.Columns){ 
            if(GetJavaType(col) == "Date") {%>this.<%=StringUtil.ToCamelCase(col.Name)%> = new Date(0);<%}
        } %>
	}

	<%
	foreach(ColumnSchema col in SourceTable.Columns)
	{
	%>    
    /**
      * [<%=col.Name %>]，
      * <%= col.Description %>
      */
      
      <%if(!col.AllowDBNull) {%>@NotNull<%} %>
      <%if(GetJavaType(col) == "Date") {%>@DateTimeFormat(iso=ISO.DATE)<%} %>
      private <%=JavaAlias[col.NativeType]%> <%=StringUtil.ToCamelCase(col.Name)%>;
      
    <%}%>
    
    <%
	foreach(ColumnSchema col in SourceTable.Columns)
	{
	%>
    /**
      * [<%=col.Name %>] getter，
      * <%= col.Description %>
      */
    	public <%=GetJavaType(col)%> get<%= StringUtil.ToPascalCase(col.Name) %> () {
        <%if(GetJavaType(col).Equals("String")) {%>
            return StringUtils.trimToEmpty(<%=StringUtil.ToCamelCase(col.Name)%>);
            <%} else { %>
    		return <%=StringUtil.ToCamelCase(col.Name)%>;
            <%} %>
    	}

    /**
      * [<%=col.Name %>] setter，
      * <%= col.Description %>
      */
    	public void set<%= StringUtil.ToPascalCase(col.Name) %>(<%=GetJavaType(col)%> <%=StringUtil.ToCamelCase(col.Name)%>) {
    		this.<%=StringUtil.ToCamelCase(col.Name)%> = <%=StringUtil.ToCamelCase(col.Name)%>;
    	}
    <%}%>
    
	@Override
	public String toString() {
		System.out.println(this.getClass().getName() + ".toString():");
        
        String str = StringUtils.EMPTY;<%
		foreach(ColumnSchema col in SourceTable.Columns)
		{%>
        str += MessageFormat.format("<%= StringUtil.ToPascalCase(col.Name) %>=\"{0}\",", this.get<%= StringUtil.ToPascalCase(col.Name) %>());<%}%>;
        return str;
                        
	}
}

<script runat="template">
    public override string GetFileName() {
        return GetClassName() + ".java";
    }
    
    public string GetClassName() {
        return StringUtil.ToPascalCase(SourceTable.Name.TrimStart("t_".ToCharArray()));
    }
    
    public string GetJavaType(ColumnSchema col) {
        try{
            return JavaAlias[col.NativeType];
        }catch(Exception ex){
            return col.NativeType + "[N/A]";
        }
    }

</script>